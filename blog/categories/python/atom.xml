<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 楚云之南]]></title>
  <link href="http://chuyun923.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://chuyun923.github.io/"/>
  <updated>2015-07-14T13:58:56+08:00</updated>
  <id>http://chuyun923.github.io/</id>
  <author>
    <name><![CDATA[楚云]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python笔记]]></title>
    <link href="http://chuyun923.github.io/blog/2015/05/04/pythonbi-ji/"/>
    <updated>2015-05-04T22:05:04+08:00</updated>
    <id>http://chuyun923.github.io/blog/2015/05/04/pythonbi-ji</id>
    <content type="html"><![CDATA[<h2>Python语言简介</h2>

<p>Python是一种解释执行的高级脚本语言。解释执行意味着Python代码的执行需要一个类似JVM的运行环境，与JVM类似，Python也存在多个不同的解析器(运行环境)，比如我们最常用的CPython，这是一个官方版本使用C编写的解析器。</p>

<p>Python的代码有两种执行方式</p>

<ol>
<li>交互式。直接在命令行输入python，进入交互模式，退出交互模式的方法有输入 <code>exit()</code> 或者 <code>Ctrl+D</code></li>
<li>源文件。使用<code>.py</code>后缀来保存python脚本。</li>
</ol>


<h2>源文件组织行</h2>

<p>在Linux/Unix环境中，我们可以在源文件的第一行指定一个注释组织行，指定当前系统执行程序的解析器的位置。</p>

<pre><code>#!/usr/bin/python    //#!开头
</code></pre>

<p>同时，我们给文件增加 <code>x</code> 执行权限</p>

<pre><code>chmod a+x *.py
</code></pre>

<p>如此一来，我们可以直接输入文件名来执行程序，这样指定的源程序的后缀不一定要是<code>.py</code></p>

<h2>基本类型</h2>

<h3>数据类型</h3>

<ol>
<li>整数，长整数</li>
<li>浮点数</li>
<li>复数</li>
</ol>


<h3>字符串</h3>

<p>使用方法和转义字符基本上和其他语言差不多，字符串也是不可改变的。</p>

<h3>布尔值</h3>

<p>True or False  注意大小写
提供了 <code>and or not</code>运算。</p>

<h3>变量</h3>

<p>Python对于变量的命名和Java一样，但是Python和JS一样，是动态语言，即变量可以被多次赋值，而且可以每次赋值的类型不一样。</p>

<h2>语法</h2>

<h3>逻辑行和物理行</h3>

<p>物理行是你在编写程序时所看见的。逻辑行是<code>Python</code>看见的单个语句。<code>Python</code>假定每个物理行对应一个 逻辑行。如果一个逻辑行需要占用多个物理行，那么可以通过<code>\</code>来进行连接。如：</p>

<pre><code>print \
i
</code></pre>

<h3>缩进</h3>

<p>空白在python语法中占有较为重要的位置，它用来作为代码块分组的选择。</p>

<h3>运算符</h3>

<p>下面仅列出和<code>Java</code>不一样的地方</p>

<ol>
<li>** 幂  x的y次幂</li>
<li>// 整除，取整数部分</li>
<li><code>not and or</code> 对应 <code>! &amp;&amp; ||</code></li>
</ol>


<h3>if</h3>

<pre><code>if boolean:
    some code
elif boolean:   //else if
    some code
else:
    some code
</code></pre>
]]></content>
  </entry>
  
</feed>
